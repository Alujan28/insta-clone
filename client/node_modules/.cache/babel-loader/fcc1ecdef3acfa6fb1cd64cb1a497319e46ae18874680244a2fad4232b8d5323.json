{"ast":null,"code":"import React,{useEffect,useState,useContext}from'react';import{UserContext}from'../../App';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Profile=()=>{const[mypics,setPics]=useState([]);// State for storing user posts\nconst{state,dispatch}=useContext(UserContext);// Accessing global state and dispatch\nconst[image,setImage]=useState(\"\");// State for storing selected image for profile update\nuseEffect(()=>{// Fetching user posts from the server\nfetch('/mypost',{headers:{\"Authorization\":\"Bearer \"+localStorage.getItem(\"jwt\")// Authorization with JWT token\n}}).then(res=>res.json()).then(result=>{console.log(result);setPics(result.mypost);// Setting user posts in the state\n});},[]);// Empty dependency array to run this effect only once after initial render\nuseEffect(()=>{if(image){// If image is selected, prepare data for upload to Cloudinary\nconst data=new FormData();data.append(\"file\",image);// Append selected file\ndata.append(\"upload_preset\",\"insta-clone\");// Cloudinary upload preset\ndata.append(\"cloud_name\",\"cnq\");// Cloudinary cloud name\n// Upload the image to Cloudinary\nfetch(\"https://api.cloudinary.com/v1_1/cnq/image/upload\",{method:\"post\",body:data}).then(res=>res.json()).then(data=>{// Once uploaded, update the profile picture on the server\nfetch('/updatepic',{method:\"put\",headers:{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer \"+localStorage.getItem(\"jwt\")},body:JSON.stringify({pic:data.url// Sending the Cloudinary URL for the new profile picture\n})}).then(res=>res.json()).then(result=>{console.log(result);// Update localStorage and global state with the new profile pic\nlocalStorage.setItem(\"user\",JSON.stringify({...state,pic:result.pic}));dispatch({type:\"UPDATEPIC\",payload:result.pic});// Dispatch to update user state\n}).catch(err=>{console.log(\"Error updating profile pic:\",err);});}).catch(err=>{console.log(\"Error uploading photo:\",err);});}},[image,dispatch,state]);// Adding dispatch and state to the dependencies\nconst updatePhoto=file=>{setImage(file);// Update the image state when a new file is selected\n};return/*#__PURE__*/_jsxs(\"div\",{style:{maxWidth:\"550px\",margin:\"0px auto\"},children:[/*#__PURE__*/_jsxs(\"div\",{style:{margin:\"18px 0px\",borderBottom:\"1px solid grey\"},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",justifyContent:\"space-around\"},children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"img\",{style:{width:\"160px\",height:\"160px\",borderRadius:\"80px\"},src:state?state.pic:\"loading\"// Display the user's profile pic or \"loading\" text\n})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:state?state.name:\"loading\"}),/*#__PURE__*/_jsx(\"h5\",{children:state?state.email:\"loading\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",justifyContent:\"space-between\",width:\"108%\"},children:[/*#__PURE__*/_jsxs(\"h6\",{children:[mypics.length,\" posts\"]}),/*#__PURE__*/_jsxs(\"h6\",{children:[state?state.followers.length:\"0\",\" followers\"]}),/*#__PURE__*/_jsxs(\"h6\",{children:[state?state.following.length:\"0\",\" following\"]})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"file-field input-field\",style:{margin:\"10px\"},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"btn #64b5f6 blue darken-1\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Update pic\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:e=>updatePhoto(e.target.files[0])})]}),/*#__PURE__*/_jsx(\"div\",{className:\"file-path-wrapper\",children:/*#__PURE__*/_jsx(\"input\",{className:\"file-path validate\",type:\"text\"})})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"gallery\",children:mypics.map(item=>{return/*#__PURE__*/_jsx(\"img\",{className:\"item\",src:item.photo,alt:item.title},item._id);})})]});};export default Profile;","map":{"version":3,"names":["React","useEffect","useState","useContext","UserContext","jsx","_jsx","jsxs","_jsxs","Profile","mypics","setPics","state","dispatch","image","setImage","fetch","headers","localStorage","getItem","then","res","json","result","console","log","mypost","data","FormData","append","method","body","JSON","stringify","pic","url","setItem","type","payload","catch","err","updatePhoto","file","style","maxWidth","margin","children","borderBottom","display","justifyContent","width","height","borderRadius","src","name","email","length","followers","following","className","onChange","e","target","files","map","item","photo","alt","title","_id"],"sources":["C:/Users/kovia/Desktop/clone insta 2/insta-clone/client/src/components/screens/Profile.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react'\r\nimport { UserContext } from '../../App'\r\n\r\nconst Profile = () => {\r\n    const [mypics, setPics] = useState([])  // State for storing user posts\r\n    const { state, dispatch } = useContext(UserContext)  // Accessing global state and dispatch\r\n    const [image, setImage] = useState(\"\")  // State for storing selected image for profile update\r\n\r\n    useEffect(() => {\r\n        // Fetching user posts from the server\r\n        fetch('/mypost', {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")  // Authorization with JWT token\r\n            }\r\n        }).then(res => res.json())\r\n        .then(result => {\r\n            console.log(result)\r\n            setPics(result.mypost)  // Setting user posts in the state\r\n        })\r\n    }, [])  // Empty dependency array to run this effect only once after initial render\r\n\r\n    useEffect(() => {\r\n        if (image) {\r\n            // If image is selected, prepare data for upload to Cloudinary\r\n            const data = new FormData()\r\n            data.append(\"file\", image)  // Append selected file\r\n            data.append(\"upload_preset\", \"insta-clone\")  // Cloudinary upload preset\r\n            data.append(\"cloud_name\", \"cnq\")  // Cloudinary cloud name\r\n\r\n            // Upload the image to Cloudinary\r\n            fetch(\"https://api.cloudinary.com/v1_1/cnq/image/upload\", {\r\n                method: \"post\",\r\n                body: data\r\n            })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                // Once uploaded, update the profile picture on the server\r\n                fetch('/updatepic', {\r\n                    method: \"put\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n                    },\r\n                    body: JSON.stringify({\r\n                        pic: data.url  // Sending the Cloudinary URL for the new profile picture\r\n                    })\r\n                }).then(res => res.json())\r\n                .then(result => {\r\n                    console.log(result)\r\n                    // Update localStorage and global state with the new profile pic\r\n                    localStorage.setItem(\"user\", JSON.stringify({ ...state, pic: result.pic }))\r\n                    dispatch({ type: \"UPDATEPIC\", payload: result.pic })  // Dispatch to update user state\r\n                }).catch(err => {\r\n                    console.log(\"Error updating profile pic:\", err)\r\n                })\r\n            }).catch(err => {\r\n                console.log(\"Error uploading photo:\", err)\r\n            })\r\n        }\r\n    }, [image, dispatch, state])  // Adding dispatch and state to the dependencies\r\n\r\n    const updatePhoto = (file) => {\r\n        setImage(file)  // Update the image state when a new file is selected\r\n    }\r\n\r\n    return (\r\n        <div style={{ maxWidth: \"550px\", margin: \"0px auto\" }}>\r\n            <div style={{ margin: \"18px 0px\", borderBottom: \"1px solid grey\" }}>\r\n\r\n                <div style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-around\",\r\n                }}>\r\n                    <div>\r\n                        {/* Profile image */}\r\n                        <img\r\n                            style={{ width: \"160px\", height: \"160px\", borderRadius: \"80px\" }}\r\n                            src={state ? state.pic : \"loading\"}  // Display the user's profile pic or \"loading\" text\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <h4>{state ? state.name : \"loading\"}</h4>\r\n                        <h5>{state ? state.email : \"loading\"}</h5>\r\n                        <div style={{ display: \"flex\", justifyContent: \"space-between\", width: \"108%\" }}>\r\n                            <h6>{mypics.length} posts</h6>\r\n                            <h6>{state ? state.followers.length : \"0\"} followers</h6>\r\n                            <h6>{state ? state.following.length : \"0\"} following</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* File upload for updating profile picture */}\r\n                <div className=\"file-field input-field\" style={{ margin: \"10px\" }}>\r\n                    <div className=\"btn #64b5f6 blue darken-1\">\r\n                        <span>Update pic</span>\r\n                        <input type=\"file\" onChange={(e) => updatePhoto(e.target.files[0])} />\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                        <input className=\"file-path validate\" type=\"text\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Gallery displaying user posts */}\r\n            <div className=\"gallery\">\r\n                {mypics.map(item => {\r\n                    return (\r\n                        <img key={item._id} className=\"item\" src={item.photo} alt={item.title} />\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}